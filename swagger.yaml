openapi: 3.0.3
info:
  title: Blog API
  termsOfService: https://github.com/codeleeks/blog
  contact:
    email: codeleeks@naver.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Blog
  url: https://github.com/codeleeks/blog
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: post
    description: Operations about post
paths:
  /posts:
    get:
      tags:
        - post
      summary: Finds Post Pages (pagination)
      description: Find Post Pages. Page starts with zero.
      operationId: findPostPages
      parameters:
        - name: page
          in: query
          description: Page Number
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostPageResponse'
  /post/{postId}:
    get:
      tags:
        - post
      summary: Finds Post by id
      description: Finds post by id
      operationId: findPostById
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'          
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
            format: long
      requestBody:
        description: Update an existent post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
        - post
      summary: Add a new post
      description: Add a new pet
      operationId: addPost
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
            format: long
      requestBody:
        description: Create a new post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'       
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
        - post
      summary: Delete an existing post
      description: Delete an existing post
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'          
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /posts/filters:
    post:
      tags:
        - post
      summary: Finds posts matched with supplied filters
      description: Finds posts matched with supplied filters
      operationId: findPostsByFilters
      parameters:
        - name: page
          in: query
          description: Page Number
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
            default: 10
      requestBody:
        description: Filters to filter posts.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFilter'
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPageResponse'
        
        
      
  /categories:
    get:
      tags:
        - category
      summary: Finds all categories
      description: Finds all categories
      operationId: findCategories
      parameters:
        - name: postId
          in: query
          description: post id
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  

  /login:
    post:
      tags:
        - login
      summary: Logs admin user into the system
      description: Logs admin user into the system
      operationId: login
      requestBody:
        description: Login Form
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginForm'
        required: true
      responses:
        '200':
          description: successful operation
          headers:
            x-access-token:
              description: token to access to system resources.
              schema:
                type: string
            x-refresh-token:
              description: token to refresh
              schema:
                type: string
                format: date-time
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized token supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /login/refresh:
    put:
      tags:
        - login
      summary: Refresh access token
      description: Refresh access token
      operationId: loginRefresh
      parameters:
        - in: header
          name: x-access-token
          required: true
          description: token to access to system resources.
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            x-access-token:
              description: token to access to system resources.
              schema:
                type: string
            x-refresh-token:
              description: token to refresh
              schema:
                type: string
                format: date-time
          
        '401':
          description: Unauthorized token supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /logout:
    delete:
      tags:
        - login
      summary: Logs admin user out of the system.
      description: Logs admin user out of the system.
      operationId: logout
      parameters:
        - in: header
          name: x-refresh-token
          required: true
          description: token to refresh
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: refresh token not found
  /search:
    get:
      tags:
        - search
      summary: Searches posts by title, contents
      description: Searches posts by title, contents
      operationId: search
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultPageResponse'
  /stats/posts:
    get:
      tags:
        - statistics
      summary: Finds post statistics
      description: >
        Finds following metrics
        
        - Finds letter count of all posts
        
        - Finds count of all posts
        
        - Finds letter count of all posts in a category
        
        - Finds count of all posts in a category
        
        - Finds total views of all posts
        
      operationId: postStats
      parameters:
        - in: query
          name: excludeCode
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostStats'
  /stats/posts/{postId}/views:
    get:
      tags:
        - statistics
      summary: Finds total views per post
      description: Finds total views per post
      operationId: totalViewPerPost
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
            format: long
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostStatsViews'
  
    
components:
  schemas:
    Category:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 1
        name:
          type: string
          example: category1
    Post:
      required:
        - id
        - title
        - contents
        - category
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 10
        createdAt:
          type: integer
          format: int32
        updatedAt:
          type: integer
          format: int32
        title:
          type: string
          example: post1
        category:
          $ref: '#/components/schemas/Category'
        contents:
          type: string
          example: "post contents written in by markdown format"
        likes:
          type: integer
          format: int32
          example: 100
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: long
          example: 1
        userName:
          type: string
        contents:
          type: string
        createdAt:
          type: integer
          format: int32
        updatedAt:
          type: integer
          format: int32

    ApiResponse:
      type: object
      properties:
        message:
          type: string
          
    PostPageResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        number:
          type: integer
          format: int32
        sort:
          type: object
          properties:
            empty:
              type: boolean
            unsorted:
              type: boolean
            sorted:
              type: boolean
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                unsorted:
                  type: boolean
                sorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            unpaged:
              type: boolean
            paged:
              type: boolean
        empty:
          type: boolean
    PostFilter:
      type: object
      description: Post Filter
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    LoginForm:
      required:
        - userName
        - password
      type: object
      description: Login Form
      properties:
        userName:
          type: string
        password:
          type: string
          
    SearchResult:
      type: object
      properties:
        highlight:
          type: string
        source:
          type: string
        postTitle:
          type: string
        postUrl:
          type: string

    SearchResultPageResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        number:
          type: integer
          format: int32
        sort:
          type: object
          properties:
            empty:
              type: boolean
            unsorted:
              type: boolean
            sorted:
              type: boolean
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                unsorted:
                  type: boolean
                sorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            unpaged:
              type: boolean
            paged:
              type: boolean
        empty:
          type: boolean
    PostStats:
      type: object
      properties:
        totalLetterCount:
          type: integer
          format: long
          example: 1000000
        totalPostCount:
          type: integer
          format: long
          example: 30
        totalLetterCountInCategory:
          type: integer
          format: long
          example: 50000
        totalPostCountInCategory:
          type: integer
          format: long
          example: 5
        totalPostViews:
          type: integer
          format: long
          example: 1000000
    PostStatsViews:
      type: array
      items:
        $ref: '#/components/schemas/PostStatsViewsPerPost'
      
    PostStatsViewsPerPost:
      type: object
      properties:
        date:
          type: string
        stats:
          $ref: '#/components/schemas/PostStatsViewsPerPostStats'
          
    PostStatsViewsPerPostStats:
      type: object
      properties:
        title:
          type: string
        views:
          type: integer
          format: long
      
          
  requestBodies:
    Post:
      description: Post object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Post'
    PostFilter:
      description: Post object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostFilter'
    LoginForm:
      description: Login Form
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginForm'
